# -*- coding: utf-8 -*-
"""oops.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15B8CCuhurXCNydXc_X4endDL_wpLhYqs

FUNCTION ARGUMENTS
"""

list1 = []

num = int(input("Enter number of elements in list: "))

for i in range(1, num + 1):
    ele = int(input("Enter elements: "))
    list1.append(ele)
print("Largest element is:", max(list1))

import math

class Hexagon :
	def hexagon_area(self, side) :
		area = (3 * math.sqrt(3) * (side * side)) / 2
		print("Hexagon Area of side ", side ," is : ", area ,"\n", end = "")


def main() :
	obj = Hexagon()
	obj.hexagon_area(7)
	obj.hexagon_area(3)
	obj.hexagon_area(5.2)

if __name__ == "__main__": main()

def is_valid_email(email):
    if len(email)<=256:
        if '@' in email:
            at_position = email.index('@')
            if at_position > 0:
                if '.' in email:
                    dot_index=email.index('.')
                    if 0 < at_position < len(email) - 1 and at_position < dot_index < len(email) - 1:
                        if dot_index != -1 and dot_index < len(email) - 1:
                            if email[0].isalpha() or email[0].isdigit():
                                return True
    else:
        return False

print("Enter the email address")
email_id=input()
res=is_valid_email(email_id)
if res:
    print("Valid email")
else:
    print("Invalid email")

def encrypt(text,s):
	result = ""
	for i in range(len(text)):
		char = text[i]
		if (char.isupper()):
			result += chr((ord(char) + s-65) % 26 + 65)
		else:
			result += chr((ord(char) + s - 97) % 26 + 97)

	return result
text = "ATTACKATONCE"
s = 4
print ("Text : " + text)
print ("Shift : " + str(s))
print ("Cipher: " + encrypt(text,s))

def encrypt(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            shifted = ord(char) + shift

            if char.islower():
                if shifted > ord('z'):
                    shifted -= 26
                elif shifted < ord('a'):
                    shifted += 26
            elif char.isupper():
                if shifted > ord('Z'):
                    shifted -= 26
                elif shifted < ord('A'):
                    shifted += 26

            encrypted_text += chr(shifted)
        else:
            encrypted_text += char
    return encrypted_text

def decrypt(encrypted_text, shift):
    return encrypt(encrypted_text, -shift)
# Example usage
input_text = "Hello, World!"
shift_amount = 5

# Encrypt the text
encrypted = encrypt(input_text, shift_amount)
print("Encrypted:", encrypted)

# Decrypt the encrypted text
decrypted = decrypt(encrypted, shift_amount)
print("Decrypted:", decrypted)

def is_palindrome(s):
    return s == s[::-1]

def get_palindrome(text):
    palindromes = []
    words = text.split()

    for word in words:
        if is_palindrome(word):
            palindromes.append(word)

    return palindromes

# Example usage
input_string = "madam refers radar to level noon civic kayak"
result = get_palindrome(input_string)

print("Palindromes in the string:")
print(result)